generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://admin:1234567@10.10.56.130:5432/ppid"
}

model account {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username   String   @unique @default("") @db.VarChar
  password   String   @db.VarChar
  role       role     @default(user)
  created_at DateTime @default(now()) @db.Timestamptz(6)
}

model contentBlock {
  id                           Int              @id @default(autoincrement())
  page                         String           @db.VarChar
  position                     Int?             @db.SmallInt
  blockType                    blockType        @default(text)
  faqId                        Int?             @unique
  created_at                   DateTime         @default(now()) @db.Timestamptz(6)
  textId                       Int?             @unique(map: "contentBlock_paragraphId_key")
  status                       status           @default(createPending)
  editId                       Int?
  heading1Id                   Int?
  heading2Id                   Int?
  imageId                      Int?
  fileId                       Int?
  fileImageId                  Int?
  qna                          faq?             @relation(fields: [faqId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  file                         file?            @relation(fields: [fileId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  fileImageBuffer              fileImageBuffer? @relation(fields: [fileImageId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  heading1                     heading1?        @relation(fields: [heading1Id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  heading2                     heading2?        @relation(fields: [heading2Id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "contentBlock_heading2Id_fkey1")
  image                        image?           @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  page_contentBlock_pageTopage page             @relation("contentBlock_pageTopage", fields: [page], references: [id], onDelete: Cascade, onUpdate: NoAction)
  text                         text?            @relation(fields: [textId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model page {
  id                                   String         @id @db.VarChar
  header                               String?        @db.VarChar
  created_at                           DateTime       @default(now()) @db.Timestamptz(6)
  positions                            Int[]
  contentBlock_contentBlock_pageTopage contentBlock[] @relation("contentBlock_pageTopage")
}

model text {
  id           Int           @id @default(autoincrement())
  content      String?       @db.VarChar
  created_at   DateTime      @default(now()) @db.Timestamptz(6)
  contentBlock contentBlock?
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model heading1 {
  id           Int            @id @default(autoincrement())
  title        String         @default("") @db.VarChar
  description  String?        @db.VarChar
  created_at   DateTime       @default(now()) @db.Timestamptz(6)
  contentBlock contentBlock[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model heading2 {
  id           Int            @id @default(autoincrement())
  title        String         @default("") @db.VarChar
  description  String?        @db.VarChar
  created_at   DateTime       @default(now()) @db.Timestamptz(6)
  contentBlock contentBlock[]
}

model image {
  id           Int            @id @default(autoincrement())
  created_at   DateTime       @default(now()) @db.Timestamptz(6)
  alt          String?        @db.VarChar
  mime         String         @db.VarChar
  image        String         @default("") @db.VarChar
  contentBlock contentBlock[]
}

model file {
  id           Int            @id @default(autoincrement())
  display      String         @db.VarChar
  link         String?        @db.VarChar
  isFile       Boolean?       @default(false)
  created_at   DateTime       @default(now()) @db.Timestamptz(6)
  contentBlock contentBlock[]
}

model card {
  id          Int      @id @default(autoincrement())
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  title       String   @db.VarChar
  description String?  @db.VarChar
  link        String?  @db.VarChar
  image       String?  @db.VarChar
}

model home {
  id           Int      @id @default(autoincrement())
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  heading1     String   @db.VarChar
  description1 String?  @db.VarChar
  subheading2  String   @db.VarChar
  heading2     String   @db.VarChar
  description2 String?  @db.VarChar
  subheading3  String   @db.VarChar
  heading3     String   @db.VarChar
  image1       String   @db.VarChar
  status       status
  image2       String   @default("") @db.VarChar
  cards        Int[]
  name         String   @default("") @db.VarChar
  address      String   @default("") @db.VarChar
  phone        String   @default("") @db.VarChar
  email        String   @default("") @db.VarChar
  instagram    String?  @default("") @db.VarChar
  youtube      String?  @db.VarChar
  twitter      String?  @db.VarChar
  facebook     String?  @db.VarChar
  linkedin     String?  @db.VarChar
  logo         String   @default("") @db.VarChar
}

model faq {
  id           Int           @id @default(autoincrement())
  created_at   DateTime      @default(now()) @db.Timestamptz(6)
  question     String        @default("") @db.VarChar
  answer       String        @default("") @db.VarChar
  contentBlock contentBlock?
}

model fileImage {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  image      String   @default("") @db.VarChar
  link       String   @default("") @db.VarChar
  title      String   @default("") @db.VarChar
  isFile     Boolean  @default(false)
}

model fileImageBuffer {
  id           Int            @id @default(autoincrement())
  created_at   DateTime       @default(now()) @db.Timestamptz(6)
  fileImageIds Int[]
  contentBlock contentBlock[]
}

model permohonan_informasi {
  id              Int      @id @default(autoincrement())
  created_at      DateTime @default(now()) @db.Timestamptz(6)
  nama            String   @db.VarChar
  tipe_identitas  String   @map("tipe-identitas") @db.VarChar
  instansi        String   @db.VarChar
  email           String   @db.VarChar
  telepon         String   @db.VarChar
  jenis_informasi String   @map("jenis-informasi") @db.VarChar
  alasan          String   @db.VarChar
  nomor_identitas String   @map("nomor-identitas") @db.VarChar

  @@map("permohonan-informasi")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model pengaduan {
  id              Int      @id @default(autoincrement())
  created_at      DateTime @default(now()) @db.Timestamptz(6)
  judul           String   @db.VarChar
  uraian          String   @db.VarChar
  nama_terduga    String   @db.VarChar
  jabatan_terduga String   @db.VarChar
  link_lampiran   String?  @db.VarChar
  nama_pelapor    String?  @db.VarChar
  email_pelapor   String?  @db.VarChar
  telepon_pelapor String?  @db.VarChar
}

model kepuasan {
  id           Int       @id @default(autoincrement())
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  nama         String    @db.VarChar
  jenisKelamin String?   @db.VarChar
  email        String    @db.VarChar
  pendidikan   String?   @db.VarChar
  tanggalLahir DateTime? @db.Date
  pekerjaan    String?   @db.VarChar
  pengajuan    Boolean?
  answers      Int[]
  saran        String?   @db.VarChar
}

enum status {
  verified
  createPending
  deletePending
  updatePending
}

enum role {
  admin
  user
}

enum blockType {
  faq
  text
  heading1
  heading2
  image
  file
  fileImageBuffer
}
