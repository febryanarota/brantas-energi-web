generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model qna {
  id                                        Int             @id @default(autoincrement())
  question                                  String
  answer                                    String
  position                                  Int             @default(autoincrement()) @db.SmallInt
  created_at                                DateTime        @default(now()) @db.Timestamptz(6)
  status                                    status?         @default(createPending)
  contentBlock                              contentBlock?
  qnaEditBuffer_qnaEditBuffer_editedToqna   qnaEditBuffer[] @relation("qnaEditBuffer_editedToqna")
  qnaEditBuffer_qnaEditBuffer_originalToqna qnaEditBuffer[] @relation("qnaEditBuffer_originalToqna")
}

model account {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username   String   @unique @default("") @db.VarChar
  password   String   @db.VarChar
  role       role     @default(user)
  created_at DateTime @default(now()) @db.Timestamptz(6)
}

model contentBlock {
  id                           Int       @id @default(autoincrement())
  page                         String    @db.VarChar
  position                     Int       @db.SmallInt
  blockType                    blockType @default(text)
  faqId                        Int?      @unique
  created_at                   DateTime  @default(now()) @db.Timestamptz(6)
  textId                       Int?      @unique(map: "contentBlock_paragraphId_key")
  status                       status    @default(createPending)
  qna                          qna?      @relation(fields: [faqId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  page_contentBlock_pageTopage page      @relation("contentBlock_pageTopage", fields: [page], references: [id], onDelete: Cascade, onUpdate: NoAction)
  text                         text?     @relation(fields: [textId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model page {
  id                                   String         @id @db.VarChar
  header                               String?        @db.VarChar
  created_at                           DateTime       @default(now()) @db.Timestamptz(6)
  contentBlock_contentBlock_pageTopage contentBlock[] @relation("contentBlock_pageTopage")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model qnaEditBuffer {
  id                              Int      @id @default(autoincrement())
  original                        Int
  edited                          Int
  created_at                      DateTime @default(now()) @db.Timestamptz(6)
  qna_qnaEditBuffer_editedToqna   qna      @relation("qnaEditBuffer_editedToqna", fields: [edited], references: [id], onDelete: Cascade, onUpdate: NoAction)
  qna_qnaEditBuffer_originalToqna qna      @relation("qnaEditBuffer_originalToqna", fields: [original], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model profile {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  name       String?  @db.VarChar
  address    String?  @db.VarChar
  phone      String?  @db.VarChar
  email      String?  @db.VarChar
  instagram  String?  @db.VarChar
  youtube    String?  @db.VarChar
  twitter    String?  @db.VarChar
  facebook   String?  @db.VarChar
}

model text {
  id           Int           @id @default(autoincrement())
  content      String?       @db.VarChar
  created_at   DateTime      @default(now()) @db.Timestamptz(6)
  contentBlock contentBlock?
}

enum status {
  verified
  createPending
  deletePending
  updatePending
}

enum role {
  admin
  user
}

enum blockType {
  faq
  text
}
